# This is a basic configuration file, which contains boilerplate options and
# some basic examples. It allows the BIRD daemon to start but will not cause
# anything else to happen.
#
# Please refer to the BIRD User's Guide documentation, which is also available
# online at http://bird.network.cz/ in HTML format, for more information on
# configuring BIRD and adding routing protocols.

# Configure logging
log syslog all;
# log "/var/log/bird.log" { debug, trace, info, remote, warning, error, auth, fatal, bug };

# Turn on global debugging of all protocols (all messages or just selected classes)
# debug protocols all;
# debug protocols { events, states };

# Turn on internal watchdog
watchdog warning 5 s;
watchdog timeout 30 s;

# these options should be adjusted per host
define local_addr = 2a0c:b641:a40::2fa:5bff:fe25:4e0b;
define routerid = 0.0.0.3;
define ospf_priority = 4;
define accept_gateway = true;
# these should stay roughly the same
define routed_net =
	[ 64:ff9b::/96+
	, 2a0c:b641:a40::/64{128,128}
	, 2a0c:b641:a40:1::/64{128,128}
	, 2a0c:b641:a40:2::/64{96,96}
	, 2a0c:b641:a40:3::/64{127,127}
	, 2a0c:b641:a40:100::/56{64,64}
	];
# please also note that interface specific configuration may have to be made in the ospf protocol (setting the cost)

# Set router ID. It is a unique identification of your router, usually one of
# IPv4 addresses of the router. It is recommended to configure it explicitly.
router id routerid;

# The Device protocol is not a real routing protocol. It does not generate any
# routes and it only serves as a module for getting information about network
# interfaces from the kernel. It is necessary in almost any configuration.
protocol device
{
}

# The direct protocol is not a real routing protocol. It automatically generates
# direct routes to all network interfaces. Can exist in as many instances as you
# wish if you want to populate multiple routing tables with direct routes.
protocol direct
{
	ipv6;			# Connect to default IPv6 table
}

# The Kernel protocol is not a real routing protocol. Instead of communicating
# with other routers in the network, it performs synchronization of BIRD
# routing tables with the OS kernel. One instance per table.
protocol kernel
{
	ipv6
	{
		import all;
		export filter
		{
			krt_prefsrc = local_addr;
			if source ~ [ RTS_BGP, RTS_OSPF, RTS_OSPF_IA, RTS_OSPF_EXT1, RTS_OSPF_EXT2 ]
			then accept;
			else reject;
		};
	};
	merge paths;
	learn;
	# keep routing table on bird stop/restart
	persist;
}

# Static routes to inject.
protocol static
{
	ipv6;
	# Example:
	# route 2001:db8::/64 unreachable;
}

# OSPF example, both OSPFv2 and OSPFv3 are supported
protocol ospf v3
{
	ecmp;
	ipv6
	{
		export filter
		{
			if net ~ routed_net && source ~ [ RTS_DEVICE, RTS_INHERIT, RTS_STATIC, RTS_PIPE ] then
			{
				ospf_metric1 = 0;
				unset(ospf_metric2);
				accept;
			}
			else reject;
		};
		import filter
		{
			if (net != ::/0 || accept_gateway)
			then accept;
			else reject;
		};
	};
	area 0.0.0.1
	{
		interface "enp*"
		{
			priority ospf_priority;
			cost 1000;
			hello 2;
			dead count 4;
			type ptp;
			bfd;
		};
	};
}

protocol bfd
{
	accept ipv6;
}
